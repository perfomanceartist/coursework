%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
//extern int yylex();
void yyerror(char *msg);
extern void print(char *msg);

%}

%union {
int num;
char letter;
}

%token  IDENTIFICATOR COLON_EQ DOT_DOT_DOT NIL_KEYWORD DEFER_KEYWORD SHIFT_LEFT SHIFT_RIGHT OPER_ASSIGNMENT
%token STRING INTEGER FLOAT TRUE_FALSE COMPLEX
%token TYPE_KEYWORD STRUCT_KEYWORD INTERFACE_KEYWORD
%token CONST_KEYWORD PACKAGE_KEYWORD IMPORT_KEYWORD VAR_KEYWORD  FUNC_KEYWORD RETURN_KEYWORD
%token IF_KEYWORD ELSE_KEYWORD SWITCH_KEYWORD CASE_KEYWORD DEFAULT_KEYWORD
%token EQ_RELATION GREATER_RELATION LESS_RELATION EQ_GREATER_RELATION EQ_LESS_RELATION NOT_EQ_RELATION
%token FOR_KEYWORD BREAK_KEYWORD CONTINUE_KEYWORD RANGE_KEYWORD GO_KEYWORD
%token INT_TYPE FLOAT_TYPE  COMPLEX_TYPE  BOOL_TYPE STRING_TYPE


%left OR_OPERATION
%left AND_OPERATION
%left NOT_OPERATION

%left '-' '+' '%'
%left '*' '/' '|'
%left '^' '&'
%left SHIFT_LEFT SHIFT_RIGHT

%nonassoc INCREMENT DECREMENT
%nonassoc LOWER_THAN_BRACKET
%nonassoc '['

%%

S :  PACKAGE  GLOBALS    
  ;

PACKAGE : 
  PACKAGE_KEYWORD IDENTIFICATOR  '\n' { print("Package declaration"); }
  ;

IMPORT : IMPORT_KEYWORD STRING  { print("Single module imported"); }
  | IMPORT_KEYWORD '(' '\n' IMPORT_MULTIPLE_STRING ')'  { print("Importing modules with brackets"); }
  ;

IMPORT_MULTIPLE_STRING :   STRING '\n' IMPORT_MULTIPLE_STRING { print("Module name"); }
  |
  ;

GLOBALS : 
  GLOBAL '\n'
  | GLOBAL'\n' GLOBALS
  ;

GLOBAL:
  | IMPORT  
  | TYPEDEF
  //| FUNCTION
  //| DECLARATION   { print("Global declaration"); } 
  | STATEMENTS      { print("Statements"); } 
  
  ;

RVALUE : 
  INTEGER
  | STRING
  | FLOAT
  | TRUE_FALSE
  | COMPLEX
  | NIL_KEYWORD
  | '(' RVALUE ')' 
  | RVALUE '+' RVALUE
  | RVALUE '-' RVALUE
  | RVALUE '*' RVALUE
  | RVALUE '/' RVALUE 
  | RVALUE '%' RVALUE
  | RVALUE '|' RVALUE
  | RVALUE '^' RVALUE
  | RVALUE '&' RVALUE
  | RVALUE SHIFT_LEFT RVALUE
  | RVALUE SHIFT_RIGHT RVALUE
  | FULL_IDENTIFICATOR  %prec LOWER_THAN_BRACKET
  | FULL_IDENTIFICATOR ARRAY_INDEXATION
  | ADDRESS_INDEXATION IDENTIFICATOR
  | POINTER_INDEXATION IDENTIFICATOR
  ;

ASSIGNMENT : 
  FULL_IDENTIFICATOR '=' RVALUE                                 { print("Assignment of variable.");  }
  | FULL_IDENTIFICATOR ARRAY_INDEXATION  '=' RVALUE             { print("Assigment of array element. "); }
  | POINTER_INDEXATION FULL_IDENTIFICATOR   '=' RVALUE          { print("Assigment of pointer by address. "); } //
  | FULL_IDENTIFICATOR OPER_ASSIGNMENT RVALUE                   { print("Operation + assignment");}
  ;
STATEMENTS : STATEMENT '\n'
  | STATEMENT '\n' STATEMENTS
  ;
STATEMENT : 
  DECLARATION  
  //| IF_ELSE_STATEMENT 
  //| FUNCTION_CALL 
  //| SWITCH 
  //| 
  ASSIGNMENT
  //| UNARY_OPERATION 
 // | FOR 
  | BREAK_KEYWORD 
  | CONTINUE_KEYWORD 
  | RETURN 
  //| '\n'
  //| DEFER_KEYWORD FUNCTION_CALL   { print("Defer function call");}
  //| GO_KEYWORD  FUNCTION_CALL     { print("Starting goroutine"); }
  ;


DECLARATION: 
  VAR_KEYWORD VARIABLE_DECLARATION 
  | VAR_KEYWORD VARIABLE_DECLARATION_ASSIGNMENT  { print("Declaration (with assignment) of variable"); }
  | VAR_KEYWORD '('  MULTIPLE_VARIABLE_DECLARATION  ')' { print("Multiple declaration"); }
  | CONST_KEYWORD VARIABLE_DECLARATION_ASSIGNMENT { print("Declaration (with assignment) of constant "); }
  | SHORT_DEFINING { print("Short defining"); }  
  ;

SHORT_DEFINING:
  IDENTIFICATOR COLON_EQ RVALUE
  | VAR_KEYWORD IDENTIFICATOR '=' RVALUE
  ;

MULTIPLE_VARIABLE_DECLARATION:
  VARIABLE_DECLARATION 
  | VARIABLE_DECLARATION_ASSIGNMENT
  | IDENTIFICATOR '=' MULTIPLE_RVALUE
  | MULTIPLE_VARIABLE_DECLARATION  VARIABLE_DECLARATION
  | MULTIPLE_VARIABLE_DECLARATION  VARIABLE_DECLARATION_ASSIGNMENT 
  | MULTIPLE_VARIABLE_DECLARATION  IDENTIFICATOR '=' MULTIPLE_RVALUE
  | MULTIPLE_VARIABLE_DECLARATION '\n'
  | '\n'
  ; 


 
VARIABLE_DECLARATION:
  MULTIPLE_IDENT TYPE  {print("Declaration of variable");}  
  ;

VARIABLE_DECLARATION_ASSIGNMENT: 
  MULTIPLE_IDENT TYPE '='  MULTIPLE_RVALUE
  ;



RETURN :
  RETURN_KEYWORD
  | RETURN_KEYWORD MULTIPLE_RVALUE 
  ;
MULTIPLE_RVALUE:
  RVALUE ',' MULTIPLE_RVALUE 
  | RVALUE
  ;

ARRAY_INDEXATION:
  '[' RVALUE ']'
  | '[' RVALUE ']' ARRAY_INDEXATION 
  ;

ADDRESS_INDEXATION:
  '&'
  | '&' ADDRESS_INDEXATION 
  ;


POINTER_INDEXATION:
  '*'
  | '*' POINTER_INDEXATION
  ;




TYPE:
  INT_TYPE
  | FLOAT_TYPE
  | COMPLEX_TYPE
  | BOOL_TYPE
  | STRING_TYPE
  //| FUNC_KEYWORD '(' FUNC_RESULT_UNNAMED ')' TYPE 
  | '[' INTEGER ']' TYPE            { print("Array type");  }
  | '[' ']' TYPE                    { print("Array type");  }
  | '*' TYPE                        { print("Pointer type");}
  | IDENTIFICATOR   
  ;


TYPEDEF:
  TYPE_KEYWORD IDENTIFICATOR TYPE   { print("Type definition"); }
  | TYPE_KEYWORD IDENTIFICATOR STRUCT_KEYWORD '{' STRUCT_FIELDS '}' { print("Struct definition"); }
  ;


STRUCT_FIELDS:
  STRUCT_FIELDS  STRUCT_FIELD '\n'
  |
  ;

STRUCT_FIELD: 
  MULTIPLE_IDENT TYPE 
  |
  ;

MULTIPLE_IDENT:
  IDENTIFICATOR
  | IDENTIFICATOR ',' MULTIPLE_IDENT
  ;


FULL_IDENTIFICATOR:
  IDENTIFICATOR
  | FULL_IDENTIFICATOR '.' IDENTIFICATOR
  ;



%%



void yyerror(char * msg) {
fprintf(stderr, "%s",  msg);

exit(1);
}
